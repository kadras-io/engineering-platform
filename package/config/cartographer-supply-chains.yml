#@ load("@ytt:data", "data")
#@ load("@ytt:struct", "struct")
#@ load("@ytt:yaml", "yaml")
#@ load("/helpers.star", "is_any_profile_enabled", "is_package_enabled", "profiles")

#@ if is_package_enabled("cartographer-supply-chains") and is_any_profile_enabled([profiles.full]):

#@ def compute_package_values():
#@   values = struct.decode(data.values.cartographer.supply_chains)
#@
#@   #! Compute values for OCI Registry server
#@   if data.values.platform.oci_registry.server and data.values.platform.oci_registry.repository:
#@     if not hasattr(data.values.cartographer.supply_chains, "registry") or not hasattr(data.values.cartographer.supply_chains.registry, "server") or not hasattr(data.values.cartographer.supply_chains.registry, "repository") or not data.values.cartographer.supply_chains.registry.server or not data.values.cartographer.supply_chains.registry.repository:
#@       values["registry"] = {}
#@       values["registry"]["server"] = data.values.platform.oci_registry.server.rstrip("/")
#@       values["registry"]["repository"] = data.values.platform.oci_registry.repository.rstrip("/") + "/workloads"
#@     end
#@   end
#@
#@   return struct.encode(values)
#@ end

---
apiVersion: packaging.carvel.dev/v1alpha1
kind: PackageInstall
metadata:
  name: cartographer-supply-chains
  namespace: #@ data.values.platform.namespace
  annotations:
    kapp.k14s.io/change-group: cartographer-supply-chains
    kapp.k14s.io/change-rule.cartographer: upsert after upserting cartographer
    kapp.k14s.io/change-rule.cartographer-blueprints: upsert after upserting cartographer-blueprints
    kapp.k14s.io/change-rule.service-account: delete before deleting serviceaccount
spec:
  serviceAccountName: kadras-install-sa
  packageRef:
    refName: cartographer-supply-chains.packages.kadras.io
    versionSelection:
      constraints: 0.5.1
      prereleases: {}
  values:
  - secretRef:
      name: cartographer-supply-chains-values
---
apiVersion: v1
kind: Secret
metadata:
  name: cartographer-supply-chains-values
  namespace: #@ data.values.platform.namespace
stringData:
  values.yaml: #@ yaml.encode(compute_package_values())

#@ end
